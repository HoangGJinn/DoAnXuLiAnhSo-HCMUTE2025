import streamlit as st
import cv2
import numpy as np
from PIL import Image
from pathlib import Path


try:
    from library.Chapter05 import CreateMotion, Demotion, DemotionWeiner
except ImportError:
    st.error("L·ªói: Kh√¥ng th·ªÉ import h√†m t·ª´ library/chapter5.py. "
             "H√£y ƒë·∫£m b·∫£o file chapter5.py g·ªëc c·ªßa b·∫°n n·∫±m trong th∆∞ m·ª•c library "
             "v√† ƒë∆∞·ªùng d·∫´n sys.path (n·∫øu c·∫ßn) ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng.")
    st.stop()
except Exception as e:
    st.error(f"L·ªói kh√¥ng mong mu·ªën khi import: {e}")
    st.stop()


DEFAULT_IMAGE_DIR = Path("./images/ImageProcessingChapter05")


OPERATIONS_C5 = {
    "1. T·∫°o Nhi·ªÖu ·∫¢nh (Motion Blur)": {"func_name": "CreateMotion", "default_img": "MotionBlur_default.png"},
    "2. L·ªçc ·∫¢nh √çt Nhi·ªÖu (Inverse Filter - Demotion)": {"func_name": "Demotion", "default_img": "InverseFilter_default.png"},
    "3. L·ªçc ·∫¢nh Nhi·ªÅu Nhi·ªÖu (Median 7x7 + Demotion)": {"func_name": "Demotion_Median", "default_img": "MedianDemolition_default.png"},
    "4. L·ªçc ·∫¢nh Nhi·ªÖu (Wiener - Median 7x7 + DemotionWeiner)": {"func_name": "DemotionWeiner_Median", "default_img": "MedianDemolition_default.png"}
}
OPERATION_NAMES = list(OPERATIONS_C5.keys())


st.title("Kh√¥i ph·ª•c ·∫£nh (Ch∆∞∆°ng 5) üîß")
selected_operation_name = st.selectbox(
    "Ch·ªçn ch·ª©c nƒÉng:",
    options=OPERATION_NAMES,
    index=0,
    key="c5_operation_select_orig_v3"
)

operation_details = OPERATIONS_C5[selected_operation_name]
processing_function_name = operation_details["func_name"]
default_image_filename = operation_details.get("default_img")

img_input_gray = None
uploaded_file = st.file_uploader(
    "T·∫£i l√™n ·∫£nh",
    type=["bmp", "png", "jpg", "jpeg"],
    key="c5_uploader_orig_v3"
)
use_default = False
if uploaded_file is None and default_image_filename:
    if DEFAULT_IMAGE_DIR.is_dir():
         default_image_path_check = DEFAULT_IMAGE_DIR / default_image_filename
         if default_image_path_check.is_file():
              use_default = st.checkbox(f"S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh ({default_image_filename})", value=True, key="c5_use_default_orig_v3")
         else:
              st.warning(f"·∫¢nh m·∫∑c ƒë·ªãnh kh√¥ng t·ªìn t·∫°i: {default_image_path_check}")
    else:
         st.warning(f"Th∆∞ m·ª•c ·∫£nh m·∫∑c ƒë·ªãnh kh√¥ng t√¨m th·∫•y: {DEFAULT_IMAGE_DIR}")

input_image_path_or_buffer = None
input_caption = "Ch∆∞a ch·ªçn ·∫£nh"
if uploaded_file:
    input_image_path_or_buffer = uploaded_file
    input_caption = f"·∫¢nh t·∫£i l√™n: {uploaded_file.name}"
elif use_default and default_image_filename:
    default_image_path = DEFAULT_IMAGE_DIR / default_image_filename
    if default_image_path.is_file():
        input_image_path_or_buffer = default_image_path
        input_caption = f"·∫¢nh m·∫∑c ƒë·ªãnh: {default_image_filename}"
    else:
        st.error(f"L·ªói: Kh√¥ng th·ªÉ s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh v√¨ file kh√¥ng t·ªìn t·∫°i: {default_image_path}")
else:
     st.warning("Vui l√≤ng t·∫£i l√™n ·∫£nh ho·∫∑c ch·ªçn s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh.")

col1, col2 = st.columns(2)

if input_image_path_or_buffer:
    try:
        img_pil = Image.open(input_image_path_or_buffer)
        img_bgr = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
        img_input_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
        with col1:
            st.subheader("·∫¢nh g·ªëc:")
            st.image(img_pil, caption=input_caption, use_container_width=True)

        with col2:
            st.subheader("K·∫øt qu·∫£:")

    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o: {e}")
        img_input_gray = None
else:
    img_input_gray = None

if img_input_gray is not None:
    st.divider()

    output_image = None
    try:
        with st.spinner("ƒêang x·ª≠ l√Ω... "):
            target_function = None
            input_for_func = img_input_gray # M·∫∑c ƒë·ªãnh d√πng ·∫£nh g·ªëc ƒë√£ chuy·ªÉn x√°m

            if processing_function_name == "Demotion_Median":
                 st.info("√Åp d·ª•ng Median Blur (kernel 7x7) tr∆∞·ªõc khi g·ªçi Demotion...")
                 input_for_func = cv2.medianBlur(img_input_gray, 7) # ·∫¢nh ƒë·∫ßu v√†o l√† ·∫£nh ƒë√£ blur
                 if "Demotion" in globals():
                     target_function = globals()["Demotion"]
                 else:
                      st.error("L·ªói: H√†m 'Demotion' kh√¥ng ƒë∆∞·ª£c import.")
            elif processing_function_name == "DemotionWeiner_Median":
                 st.info("√Åp d·ª•ng Median Blur (kernel 7x7) tr∆∞·ªõc khi g·ªçi DemotionWeiner...")
                 input_for_func = cv2.medianBlur(img_input_gray, 7) # ·∫¢nh ƒë·∫ßu v√†o l√† ·∫£nh ƒë√£ blur
                 if "DemotionWeiner" in globals():
                     target_function = globals()["DemotionWeiner"]
                 else:
                      st.error("L·ªói: H√†m 'DemotionWeiner' kh√¥ng ƒë∆∞·ª£c import.")
            else:
                 # G·ªçi c√°c h√†m kh√°c tr·ª±c ti·∫øp
                 if processing_function_name in globals():
                     target_function = globals()[processing_function_name]
                 else:
                     st.error(f"L·ªói: H√†m '{processing_function_name}' kh√¥ng ƒë∆∞·ª£c import.")

            # Th·ª±c thi h√†m n·∫øu ƒë√£ t√¨m th·∫•y
            if target_function:
                 output_image = target_function(input_for_func)
            else:
                 st.error("Kh√¥ng th·ªÉ th·ª±c thi do l·ªói import h√†m.")

            with col2:
                if output_image is not None and isinstance(output_image, np.ndarray):
                    st.image(output_image, caption=f"K·∫øt qu·∫£: {selected_operation_name}", use_container_width=True)
                elif target_function:
                    st.warning("H√†m x·ª≠ l√Ω ƒë√£ ch·∫°y nh∆∞ng kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá.")

    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω '{selected_operation_name}': {e}")
        import traceback
        st.code(traceback.format_exc())
else:
     with col1:
          st.info("Ch∆∞a c√≥ ·∫£nh ƒë·∫ßu v√†o ƒë·ªÉ x·ª≠ l√Ω.")
